GraphQL Scalar types:
    Int: A signed 32‐bit integer.
    Float: A signed double-precision floating-point value.
    String: A UTF‐8 character sequence.
    Boolean: true or false.
    ID: The ID scalar type represents a unique identifier, 
        often used to refetch an object or as the key for a cache. 
        The ID type is serialized in the same way as a String; 
        however, defining it as an ID signifies that it is not intended to be human‐readable.

Schema: define what data look likes and what to do with data
resolvers: run when a query, mutation or subscription is called, it knows how to get or mutate the data
=> resolvers object structure mirrors the structure of Schema
=> the data returned from a resolver must match up with the fields of the type it returns
for example: 
const typeDefs = `
    type User{
        id: ID!
        name: String!
        email: String!
        age: Int!
    }

    type Query{
        me: User!
    }

`
const resolvers = {
    Query: {
        me(){
            return {
                id: "123",
                name: "Giang",
                email: "giangqwerty69@gmail.com"
            }
        }
    }
}

=> a mutation or a query without arguments list can stripe out "()" (like above)
=> note that the resolver doesn't return age => if a client try to fetch age => error because age is an required field
=> either return age from resolver or remove "!" from age

Non-scalar types: Array or custom types (object types): 
Non-scalar types contain other non-scalar types or scalar types

type MyType{
    myField: String! # the "!" show that this is an required field, it always is (return) a string, not null
    myField2: [String!]! #the outer "!" shows that this is an required field, always is an array, not null
                        # the inner "!" shows that this is an array of type String, it can be empty but
                        # if it has value, the value must be a String, not null, not any other types
}
=> the value return from resolver of the field decorated with "!" must not be null

every resolver is injected with for arguments: parent, args, ctx, info, including custom type's resolver
 - args is where the arguments from the client live (it contains all the arguments sent from the client)
type Query{
        me: User!
        users(query: String): [User!]! #query is optional, if query is not passed, remove the "()" from the client query
        add(a: Float!, b: Float!): Float!
        post: Post!
        getPostById(id: ID!): Post!
        posts: [Post!]!
}
e.g : {                 
  users{
    id
    name
    email
    age
  }
}
{
  users(query:"a"){
    id
    name
    email
    age
  }
If a query, a mutation or a subscription return an object of a custom type or an array of objects of the custom type, if that custom type have a resolver,  
that resolver will be called for each object of the array, that resolver is injected with the parent parameter pointing to the object being consider (the object is of the custom type returned) => 
we can determine what can be return to the client here, for example we can stripe out sensitive infomation such as password, email,... or we
can use it to return the relational data => the value returned from that field resolver will override the corresponding field value of the object => the client will recieve the 
value returned from the field resolver

- selection set is applied only to an array of object type or to an object type itself
- selection set example: 
    query getAllsBooks{
        getBooks{
            id
            title
        }
    }
-selection set for an array: select fields in each object of the array
e.g: 
    query getAllsBooks{
        getBooks{
            id
            title
            comments{ #comment is an array
                id
                content
            }
        }
    }
=> return something like {
    "data": {
        "getBooks": [{
            "id": "someID",
            "title": "someTitle",
            "comments": [{
                "id": "commentID",
                "content": "commentContent"
            },{
                ...
            }]
        },{...}]
    }
}

- input types can only have scalar types
- if a field is of an enum type, the value returned from that field must be one of the
    constant of the enum type


import {Prisma} from 'prisma-binding';

const prisma = new Prisma({
    typeDefs: 'src/generated/prisma.graphql',// the schema we fetch from prisma, not datamodel.graphql
    endpoint: 'localhost:4466',
});

export default prisma;

- prisma-binding come with 4 objects: prisma.query, prisma.mutation, prisma.subsciption and prisma.exists
query, mutation and subsciption have methods for all queriesm, mutation, subsciption,...
example: prisma.query.users(), prisma.mutation.updateUser({<arguments> => match up with input type})

{
    "projects": {
        "prisma": {
            "schemaPath": "src/generated/prisma.graphql",
            "extensions":{
                "endpoints": {
                    "default": "http://localhost:4466"
                }
            }
        }
    }
}

lenh "get-schema": "graphql get-schema -p prisma" : lay schema tu endpoint dinh nghia trong
project "prisma" va luu vao file "src/generated/prisma.graphql" (schemaPath)

- info: chua select set ma client gui len

prisma have built-in support for relational data => no need to override it in field resolvers

data flow: Prisma -> nodejs -> client: the data structure returned from Prisma to nodejs must match the
data structure returned from nodejs to client if we want to directly return the data from Prisma to
client through node, otherwise we have to transform the data returned from prisma to match up
with the data structure nodejs return to the client (with mutation or query), with subscription,
both data structure must match no matter what because in subsciption resolvers, we must explicitly
return prisma subscription. example: 
 comment: {
        async subscribe(parent,{postId},{db,pubSub,prisma},info){
            return prisma.subscription.comment({where: {
                node: {
                    post: {
                        id: postId
                    }
                }
            }},info)
        }
       
    },

 =>>>>>   DateTime in prisma and string is conversible

 - trong thu muc duoc init boi prisma co 3 file: 
    + prisma.yml: Chứa thông tin cấu hình service prisma: như là endpoint, datamodel, secret của service và endpoint ở đây phải trỏ đến đường dẫn tới prisma server
                ví dụ nếu prisma server chạy trong container với cổng 4466 và được map ra ngoài cổng 4466 của máy local => endpoint phải là http://localhost:4666 (service và stage tùy chọn,
                mặc định là default/default)
    + datamodel.graphql: Chứa định nghĩa về các bảng dữ liệu, các trường trong bảng và kiểu dữ liệu của chúng, và cả mối quan hệ giữa các bảng
    + docker-compose.yml: Có nhiệm vụ cấu hình server prisma (port,volumes,...) và chỉ định server prisma đó sẽ kết nối đến database nào
    => khi chạy docker-compose up: là startup container có nhiệm vụ chạy server prisma, còn khi chạy prisma deploy trong thư mục prisma mới là
    deploy 1 service prisma lên server prisma => do đó file docker-compose.yml có thể để ngoài thư mục ứng dụng và các file còn lại trong thư mục prisma
    nên để trong thư mục ứng dụng => có thể deploy nhiều service lên 1 server prisma
    => khi app cũng được build và chạy từ cùng 1 file docker-compose với prisma, các kết nối đến server prisma phải thay phần host name là tên service prisma 
    được tạo từ docker-compose (vì localhost trong container chính là địa chỉ mạng của container đó, mà container đó KHÔNG có prisma server chạy ở trong), 
    còn khi không chạy app bằng container, sẽ sử dụng port đã map ra ngoài của prisma để kết nối. VD: http://localhost:4466
    => nghĩa là muốn deploy service prisma thì phải có server prisma (local hoặc cloud, nếu mà local thì phải chạy container prisma server từ file docker-compose.yml, cloud thì tự host 
    hoặc dùng dịch vụ của prisma) => có sẵn server prisma thì khỏi cần chạy container prisma mà trong file prisma.yml trỏ thẳng endpoint tới con server prisma đó rồi deploy service như thường
