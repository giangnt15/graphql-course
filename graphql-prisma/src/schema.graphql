type User{
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    comments: [Comment!]!
    createdAt: String!
}

type Post{
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment{
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type Query{
    me: User!
    users(query: String): [User!]! 
    add(numbers: [Float!]!): Float!
    post: Post!
    getPostById(id: ID!): Post!
    posts(query: String): [Post!]!

    comments(query: String): [Comment!]!
}

type Mutation{
    createUser(data: CreateUserInput!): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    createPost(data: CreatePostInput): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!,data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription{
    count: Int!
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

type CommentSubscriptionPayload{
    mutation: MutationType!
    node: Comment
}

type PostSubscriptionPayload{
    mutation: MutationType!
    node: Post
}

enum MutationType{
    CREATED
    UPDATED
    DELETED
}

input UpdateCommentInput{
    text: String
}

input UpdatePostInput{
    title: String
    body: String
    published: Boolean
}

input CreateUserInput{
    name: String!
    email: String!
}

input UpdateUserInput{
    name: String
    email: String
}

input CreatePostInput{
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input CreateCommentInput{
    text: String!
    author: ID!
    post: ID!
}